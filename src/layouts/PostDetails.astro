---
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Tag from "@/components/Tag.astro";
import Datetime from "@/components/Datetime.astro";
import Waline from "@/components/Waline.astro";
import { getNotionPageContent } from "@/utils/notionContent";
import type { CollectionEntry } from "astro:content";
import { slugifyStr } from "@/utils/slugify";
import ShareLinks from "@/components/ShareLinks.astro";
import BackButton from "@/components/BackButton.astro";
import IconChevronLeft from "@/assets/icons/IconChevronLeft.svg";
import IconChevronRight from "@/assets/icons/IconChevronRight.svg";
import { SITE } from "@/config";
import { generateToc } from "@/utils/generateToc";
import TOC from "@/components/TOC.astro";
import readingTimeLib from "reading-time";

export interface Props {
  post: any;
  posts: any[];
}

const { post, posts } = Astro.props;

// Safety check for post data
if (!post || !post.data) {
  return Astro.redirect('/404');
}

const {
  title,
  author,
  description,
  ogImage,
  pubDatetime,
  modDatetime,
  tags,
} = post.data;
let readingTime = post.data.readingTime;

let Content: any = null;
let headings: any[] = [];
let notionContent: string = "";

try {
  // Fetch content from Notion using the page ID
  notionContent = await getNotionPageContent(post.id);

  // Create a simple content component that renders the HTML
  Content = () => null; // We'll render the HTML directly instead

  // Extract headings from Notion content for TOC and add id attributes
  const headingRegex = /<h([1-6])([^>]*)>(.*?)<\/h[1-6]>/gi;
  const extractedHeadings: any[] = [];
  let processedContent = notionContent;
  let match;
  let headingIndex = 0;

  while ((match = headingRegex.exec(notionContent)) !== null) {
    const [, level, existingAttrs, content] = match;
    const depth = parseInt(level);
    const text = content.replace(/<[^>]*>/g, '').trim(); // Remove HTML tags from text

    if (text && depth >= 2 && depth <= 4) { // Only include h2-h4 for TOC
      const slug = slugifyStr(text);

      extractedHeadings.push({
        depth,
        text,
        slug
      });

      // Add id attribute to heading if it doesn't already have one
      const fullMatch = match[0];
      if (!existingAttrs.includes('id=')) {
        const newHeading = `<h${level}${existingAttrs} id="${slug}">${content}</h${level}>`;
        processedContent = processedContent.replace(fullMatch, newHeading);
      }
    }
    headingIndex++;
  }

  notionContent = processedContent;
  headings = extractedHeadings;
} catch (error) {
  notionContent = `<div class="error-message">
    <p>Unable to load content from Notion.</p>
    <p>Please try again later.</p>
  </div>`;
  headings = [];
}
 
// Ensure readingTime exists: compute from fetched Notion HTML if missing
if (!readingTime) {
  try {
    const textOnly = notionContent.replace(/<[^>]*>/g, " ").replace(/\s+/g, " ").trim();
    const rt = readingTimeLib(textOnly);
    readingTime = rt?.text ?? null;
  } catch (err) {
    // Reading time computation failed - silently continue
  }
}
 
// Reading time logged for debugging (removed for production)
 
const toc = generateToc(headings);

const ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;
const ogUrl = new URL(
  ogImageUrl ?? `/blog/${slugifyStr(title)}/index.png`,
  Astro.url.origin
).href;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  ogImage: ogUrl,
  scrollSmooth: true,
};

const breadcrumbStructuredData = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    {
      "@type": "ListItem",
      "position": 1,
      "name": "Home",
      "item": SITE.website
    },
    {
      "@type": "ListItem",
      "position": 2,
      "name": "Blog",
      "item": `${SITE.website}blog/`
    },
    {
      "@type": "ListItem",
      "position": 3,
      "name": title,
      "item": new URL(Astro.url.pathname, Astro.url)
    }
  ]
};

/* ========== Prev/Next Posts ========== */
const allPosts = (posts || []).map(({ data }: any) => ({
  slug: data?.slug,
  title: data?.title,
}));
const currentPostIndex = allPosts.findIndex(a => a.slug === (post?.data?.slug ?? null));
const prevPost =
  currentPostIndex < allPosts.length - 1
    ? allPosts[currentPostIndex + 1]
    : null;
const nextPost = currentPostIndex > 0 ? allPosts[currentPostIndex - 1] : null;
---

<Layout {...layoutProps}>
  <!-- BreadcrumbList Schema -->
  <script
    is:inline
    type="application/ld+json"
    set:html={JSON.stringify(breadcrumbStructuredData)}
  />
  <Header />
  <TOC headings={toc} />
  <BackButton />
  <main
    id="main-content"
    class:list={[
      "mx-auto w-full max-w-4xl px-4 pb-12",
      { "mt-8": !SITE.showBackButton },
    ]}
  >
    <h1
      transition:name={slugifyStr(title)}
      class="text-accent my-2 inline-block text-2xl font-bold sm:text-3xl"
    >
      {title}
    </h1>
    <div class="flex items-center gap-4">
      <Datetime
        pubDatetime={pubDatetime}
        modDatetime={modDatetime}
        size="sm"
        class="mb-2"
      />
    </div>
    <p class="ml-1.5 text-xs font-light">By : {author}{readingTime ? ` | ${readingTime}` : ''}</p>
    <article id="article" class="prose mx-auto mt-8 max-w-4xl">
      <img
        class="h-[14rem] w-[100vw] overflow-hidden rounded-lg object-cover object-center"
        src={post.data.ogImage?.src}
        alt={title ? `Cover image for blog post "${title}"${author ? ` by ${author}` : ""}` : "Blog post cover image"}
        loading="eager"
      />

      <!-- Render Notion content as HTML -->
      <div class="notion-content prose prose-lg mx-auto max-w-4xl" set:html={notionContent}></div>
    </article>

    <ul class="my-8 flex flex-row items-center justify-center md:justify-end">
      {(tags || []).map((tag: string) => <Tag tag={slugifyStr(tag)} tagName={tag} />)}
    </ul>
    <div
      class="flex flex-col items-center justify-between gap-8 sm:flex-row sm:items-end sm:gap-4"
    >
      <ShareLinks class="transition duration-200 hover:opacity-80" />

      <button
        id="back-to-top"
        class="focus-outline hidden whitespace-nowrap py-1 transition duration-200 hover:-translate-y-1 hover:opacity-75 md:block"
      >
        <IconChevronLeft class="inline-block rotate-90" />
        <span>Go Top</span>
      </button>
    </div>

    <hr class="my-6 border-dashed" />

    <!-- Previous/Next Post Buttons -->
    <div data-pagefind-ignore class="grid grid-cols-2 gap-8">
      {
        prevPost && (
          <a
            href={`/blog/${prevPost.slug}`}
            class="flex w-full gap-1 hover:opacity-75"
          >
            <IconChevronLeft class="inline-block flex-none" />
            <div>
              <span>Older Post</span>
              <div class="text-accent/85 pt-2 text-sm">{prevPost.title}</div>
            </div>
          </a>
        )
      }
      {
        nextPost && (
          <a
            href={`/blog/${nextPost.slug}`}
            class="flex w-full justify-end gap-1 text-right hover:opacity-75 sm:col-start-2"
          >
            <div>
              <span>Later Post</span>
              <div class="text-accent/85 pt-2 text-sm">{nextPost.title}</div>
            </div>
            <IconChevronRight class="inline-block flex-none" />
          </a>
        )
      }
    </div>

    <Waline />
  </main>
  <Footer />
</Layout>

<script is:inline data-astro-rerun>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-fill";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-[4px] w-0 bg-accent rounded-lg";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    document.addEventListener("scroll", () => {
      const winScroll =
        document.body.scrollTop || document.documentElement.scrollTop;
      const height =
        document.documentElement.scrollHeight -
        document.documentElement.clientHeight;
      const scrolled = (winScroll / height) * 100;
      if (document) {
        const myBar = document.getElementById("myBar");
        if (myBar) {
          myBar.style.width = scrolled + "%";
        }
      }
    });
  }
  updateScrollProgress();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  /** Copy function for Notion code blocks */
  function copyCodeBlock(button) {
    const codeBlock = button.closest('.notion-code-block');
    const codeElement = codeBlock.querySelector('.shiki code') || codeBlock.querySelector('code');
    const text = codeElement?.textContent || '';

    if (!text.trim()) {
      return;
    }

    navigator.clipboard.writeText(text).then(() => {
      const originalText = button.textContent;
      button.textContent = 'Copied!';
      button.classList.add('copied');
      button.disabled = true;

      setTimeout(() => {
        button.textContent = originalText;
        button.classList.remove('copied');
        button.disabled = false;
      }, 2000);
    }).catch(() => {
      button.textContent = 'Error';
      setTimeout(() => {
        button.textContent = 'Copy';
      }, 2000);
    });
  }

  // Make function globally available
  window.copyCodeBlock = copyCodeBlock;

  /** Theme detection and code block re-rendering */
  function initThemeAwareCodeBlocks() {
    const codeBlocks = document.querySelectorAll('.notion-code-block');

    codeBlocks.forEach(block => {
      const language = block.dataset.language;
      if (!language) return;

      // Re-render code block with current theme
      updateCodeBlockTheme(block, language);
    });
  }

  function updateCodeBlockTheme(block, language) {
    // This function would re-render the code block with the current theme
    // For now, we'll just update the visual appearance
    const isDark = document.documentElement.classList.contains('dark') ||
                   document.documentElement.getAttribute('data-theme') === 'dark';

    block.setAttribute('data-theme', isDark ? 'dark' : 'light');
  }

  // Listen for theme changes (guarded to avoid redeclaration)
  if (!window.__themeObserver) {
    window.__themeObserver = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && (mutation.attributeName === 'class' || mutation.attributeName === 'data-theme')) {
          // Theme changed, update code blocks
          setTimeout(() => {
            initThemeAwareCodeBlocks();
          }, 100);
        }
      });
    });
  
    window.__themeObserver.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class', 'data-theme']
    });
  } else {
    // Already initialized; do nothing to avoid duplicate observer
  }

  // Initialize theme-aware code blocks on load
  document.addEventListener('DOMContentLoaded', () => {
    initThemeAwareCodeBlocks();
    initLazyLoading();
  });

  // Re-initialize after Astro page transitions
  document.addEventListener('astro:after-swap', () => {
    setTimeout(() => {
      initThemeAwareCodeBlocks();
      initLazyLoading();
    }, 100);
  });

  /** Initialize lazy loading for images in Notion content */
  function initLazyLoading() {
    const images = document.querySelectorAll('.notion-content img:not([loading])');
    images.forEach(img => {
      if (!img.hasAttribute('loading')) {
        img.setAttribute('loading', 'lazy');
        img.setAttribute('decoding', 'async');
      }
    });
  }


  /** Scrolls the document to the top when

   * the "Back to Top" button is clicked. */
  function backToTop() {
    function scrollHandler() {
      try {
        window.scrollTo({ top: 0, behavior: 'smooth' });
      } catch (err) {
        // Fallback for older browsers
        document.body.scrollTop = 0; // For Safari
        document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
      }
    }

    function attach() {
      const btn = document.querySelector("#back-to-top");
      if (!btn) return;
      // Remove any existing inline handler to avoid duplicates, then add listener
      try {
        btn.onclick = null;
      } catch (e) {
        /* ignore */
      }
      btn.addEventListener("click", scrollHandler);
    }

    // Attach immediately (for full page loads)
    attach();

    // Re-attach after Astro client navigation or page load events
    document.addEventListener("astro:page-load", attach);
    document.addEventListener("astro:after-swap", () => {
      attach();
      // Keep existing behavior of jumping to top after swap
      try {
        window.scrollTo({ left: 0, top: 0, behavior: "instant" });
      } catch (e) {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
      }
    });
  }
  backToTop();

  /* Go to page start after page swap */
  document.addEventListener("astro:after-swap", () =>
    window.scrollTo({ left: 0, top: 0, behavior: "instant" })
  );

</script>
