---
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Tag from "@/components/Tag.astro";
import Datetime from "@/components/Datetime.astro";
import Waline from "@/components/Waline.astro";
import { getNotionPageContent } from "@/utils/notionContent";
import type { CollectionEntry } from "astro:content";
import { slugifyStr } from "@/utils/slugify";
import ShareLinks from "@/components/ShareLinks.astro";
import BackButton from "@/components/BackButton.astro";
import IconChevronLeft from "@/assets/icons/IconChevronLeft.svg";
import IconChevronRight from "@/assets/icons/IconChevronRight.svg";
import { SITE } from "@/config";
import { generateToc } from "@/utils/generateToc";
import TOC from "@/components/TOC.astro";

export interface Props {
  post: CollectionEntry<"blog">;
  posts: CollectionEntry<"blog">[];
}

const { post, posts } = Astro.props;

// Safety check for post data
if (!post || !post.data) {
  return Astro.redirect('/404');
}

const {
  title,
  author,
  description,
  ogImage,
  pubDatetime,
  modDatetime,
  tags,
  readingTime,
} = post.data;

let Content: any = null;
let headings: any[] = [];
let notionContent: string = "";

try {
  // Fetch content from Notion using the page ID
  notionContent = await getNotionPageContent(post.id);

  // Create a simple content component that renders the HTML
  Content = () => null; // We'll render the HTML directly instead
  headings = []; // For now, we'll skip TOC generation from Notion content
} catch (error) {
  console.warn('Failed to fetch Notion content:', error);
  notionContent = `<div class="error-message">
    <p>Unable to load content from Notion.</p>
    <p>Please try again later.</p>
  </div>`;
}

const toc = generateToc(headings);

const ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;
const ogUrl = new URL(
  ogImageUrl ?? `/blog/${slugifyStr(title)}/index.png`,
  Astro.url.origin
).href;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  ogImage: ogUrl,
  scrollSmooth: true,
};

/* ========== Prev/Next Posts ========== */
const allPosts = posts.map(({ data: { title, slug } }) => ({
  slug,
  title,
}));
const currentPostIndex = allPosts.findIndex(a => a.slug === post.data.slug);
const prevPost =
  currentPostIndex < allPosts.length - 1
    ? allPosts[currentPostIndex + 1]
    : null;
const nextPost = currentPostIndex > 0 ? allPosts[currentPostIndex - 1] : null;
---

<Layout {...layoutProps}>
  <Header />
  <TOC headings={toc} />
  <BackButton />
  <main
    id="main-content"
    class:list={[
      "mx-auto w-full max-w-4xl px-4 pb-12",
      { "mt-8": !SITE.showBackButton },
    ]}
  >
    <h1
      transition:name={slugifyStr(title)}
      class="text-accent my-2 inline-block text-2xl font-bold sm:text-3xl"
    >
      {title}
    </h1>
    <div class="flex items-center gap-4">
      <Datetime
        pubDatetime={pubDatetime}
        modDatetime={modDatetime}
        size="sm"
        class="mb-2"
      />
    </div>
    <p class="ml-1.5 text-xs font-light">By : {author} | {readingTime}</p>
    <article id="article" class="prose mx-auto mt-8 max-w-4xl">
      <img
        class="h-[14rem] w-[100vw] overflow-hidden rounded-lg object-cover object-center"
        src={post.data.ogImage?.src}
        alt={title ? `Cover image for ${title}` : "Blog post cover image"}
        loading="eager"
      />

      <!-- Render Notion content as HTML -->
      <div class="notion-content prose prose-lg mx-auto max-w-4xl" set:html={notionContent}></div>
    </article>

    <ul class="my-8 flex flex-row items-center justify-center md:justify-end">
      {tags.map(tag => <Tag tag={slugifyStr(tag)} tagName={tag} />)}
    </ul>
    <div
      class="flex flex-col items-center justify-between gap-8 sm:flex-row sm:items-end sm:gap-4"
    >
      <ShareLinks class="transition duration-200 hover:opacity-80" />

      <button
        id="back-to-top"
        class="focus-outline hidden whitespace-nowrap py-1 transition duration-200 hover:-translate-y-1 hover:opacity-75 md:block"
      >
        <IconChevronLeft class="inline-block rotate-90" />
        <span>Go Top</span>
      </button>
    </div>

    <hr class="my-6 border-dashed" />

    <!-- Previous/Next Post Buttons -->
    <div data-pagefind-ignore class="grid grid-cols-2 gap-8">
      {
        prevPost && (
          <a
            href={`/blog/${prevPost.slug}`}
            class="flex w-full gap-1 hover:opacity-75"
          >
            <IconChevronLeft class="inline-block flex-none" />
            <div>
              <span>Older Post</span>
              <div class="text-accent/85 pt-2 text-sm">{prevPost.title}</div>
            </div>
          </a>
        )
      }
      {
        nextPost && (
          <a
            href={`/blog/${nextPost.slug}`}
            class="flex w-full justify-end gap-1 text-right hover:opacity-75 sm:col-start-2"
          >
            <div>
              <span>Later Post</span>
              <div class="text-accent/85 pt-2 text-sm">{nextPost.title}</div>
            </div>
            <IconChevronRight class="inline-block flex-none" />
          </a>
        )
      }
    </div>

    <Waline />
  </main>
  <Footer />
</Layout>

<script is:inline data-astro-rerun>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-fill";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-[4px] w-0 bg-accent rounded-lg";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    document.addEventListener("scroll", () => {
      const winScroll =
        document.body.scrollTop || document.documentElement.scrollTop;
      const height =
        document.documentElement.scrollHeight -
        document.documentElement.clientHeight;
      const scrolled = (winScroll / height) * 100;
      if (document) {
        const myBar = document.getElementById("myBar");
        if (myBar) {
          myBar.style.width = scrolled + "%";
        }
      }
    });
  }
  updateScrollProgress();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    const copyButtonLabel = "Copy";
    const codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (const codeBlock of codeBlocks) {
      // Prevent duplicate copy buttons
      if (codeBlock.querySelector(".copy-code")) continue;

      const wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      const copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-3 top-3 rounded bg-accent/80 hover:bg-accent px-2 py-1 text-xs leading-4 text-white font-semibold transition duration-200";
      copyButton.innerHTML = copyButtonLabel;
      copyButton.setAttribute("aria-label", "Copy code to clipboard");
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      const code = block.querySelector("code");
      const text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  /** Scrolls the document to the top when
   * the "Back to Top" button is clicked. */
  function backToTop() {
    document.querySelector("#back-to-top")?.addEventListener("click", () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
  }
  backToTop();

  /* Go to page start after page swap */
  document.addEventListener("astro:after-swap", () =>
    window.scrollTo({ left: 0, top: 0, behavior: "instant" })
  );
</script>
