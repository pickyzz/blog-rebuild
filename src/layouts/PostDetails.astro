---
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Tag from "@/components/Tag.astro";
import Datetime from "@/components/Datetime.astro";
import Waline from "@/components/Waline.astro";
import { getNotionPageContent } from "@/utils/notionContent";
import { slugifyStr } from "@/utils/slugify";
import ShareLinks from "@/components/ShareLinks.astro";
import BackButton from "@/components/BackButton.astro";
import IconChevronLeft from "@/assets/icons/IconChevronLeft.svg";
import IconChevronRight from "@/assets/icons/IconChevronRight.svg";
import { SITE } from "@/config";
import { isAllowedUrl } from "@/config";
import { generateToc } from "@/utils/generateToc";
import TOC from "@/components/TOC.astro";
import readingTimeLib from "reading-time";
import getPostsByTag from "@/utils/getPostsByTag";

export interface Props {
  post: any;
  posts: any[];
}

const { post, posts } = Astro.props;

// Safety check for post data
if (!post || !post.data) {
  return Astro.redirect("/404");
}

const { title, author, description, ogImage, pubDatetime, modDatetime, tags } =
  post.data;
let readingTime = post.data.readingTime;

let Content: any = null;
let headings: any[] = [];
let notionContent: string = "";

try {
  // Fetch content from Notion using the page ID
  notionContent = await getNotionPageContent(post.id);

  // Create a simple content component that renders the HTML
  Content = () => null; // We'll render the HTML directly instead

  // Extract headings from Notion content for TOC and add id attributes
  const headingRegex = /<h([1-6])([^>]*)>(.*?)<\/h[1-6]>/gi;
  const extractedHeadings: any[] = [];
  let processedContent = notionContent;
  let match;
  let headingIndex = 0;

  // Store heading mappings for adding IDs
  const headingMappings: Array<{ original: string; new: string }> = [];

  while ((match = headingRegex.exec(notionContent)) !== null) {
    const [, level, existingAttrs, content] = match;
    const depth = parseInt(level);

    // Better text extraction - handle nested HTML elements using regex
    // Remove all HTML tags to get clean text
    const text = content
      .replace(/<[^>]*>/g, "") // Remove HTML tags
      .replace(/&nbsp;/g, " ") // Replace non-breaking spaces
      .replace(/&[a-zA-Z0-9#]+;/g, "") // Remove HTML entities
      .trim();

    if (text && depth >= 2 && depth <= 4) {
      // Only include h2-h4 for TOC
      const slug = slugifyStr(text);

      extractedHeadings.push({
        depth,
        text,
        slug,
      });

      // Store mapping for ID replacement if needed
      if (!existingAttrs.includes("id=")) {
        const fullMatch = match[0];
        const newHeading = `<h${level}${existingAttrs} id="${slug}">${content}</h${level}>`;
        headingMappings.push({ original: fullMatch, new: newHeading });
      }
    }
    headingIndex++;
  }

  // Apply heading ID replacements
  headingMappings.forEach(({ original, new: newHeading }) => {
    processedContent = processedContent.replace(original, newHeading);
  });

  notionContent = processedContent;
  headings = extractedHeadings;
} catch (error) {
  notionContent = `<div class="error-message">
    <p>Unable to load content from Notion.</p>
    <p>Please try again later.</p>
  </div>`;
  headings = [];
}

// Ensure readingTime exists: compute from fetched Notion HTML if missing
if (!readingTime) {
  try {
    const textOnly = notionContent
      .replace(/<[^>]*>/g, " ")
      .replace(/\s+/g, " ")
      .trim();
    const rt = readingTimeLib(textOnly);
    readingTime = rt?.text ?? null;
  } catch (err) {
    // Reading time computation failed - silently continue
  }
}

// Reading time logged for debugging (removed for production)

const toc = generateToc(headings);

const ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;
const ogUrl = new URL(
  ogImageUrl ?? `/blog/${slugifyStr(title)}/index.png`,
  Astro.url.origin
).href;

// If the ogUrl points to an allowlisted external host, route it through
// our serverless image proxy so edge caching can be applied and signed
// URLs won't expire for clients.
let proxyOgUrl = ogUrl;
let placeholderOg: string | undefined = undefined;
try {
  if (isAllowedUrl(ogUrl)) {
    const enc = Buffer.from(encodeURIComponent(ogUrl), 'utf8')
      .toString('base64')
      .replace(/\+/g, '-')
      .replace(/\//g, '_')
      .replace(/=+$/, '');
    proxyOgUrl = `/api/image/p/${enc}`;
  }
} catch (e) {
  // If ogUrl is not a valid URL, fall back to original value.
}

try {
  if (ogImage && (ogImage as any).placeholder) {
    placeholderOg = (ogImage as any).placeholder as string;
  }
} catch (e) {}

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  ogImage: ogUrl,
  scrollSmooth: true,
  robots: "index, follow",
};

const breadcrumbStructuredData = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    {
      "@type": "ListItem",
      position: 1,
      name: "Home",
      item: SITE.website,
    },
    {
      "@type": "ListItem",
      position: 2,
      name: "Blog",
      item: `${SITE.website}blog/`,
    },
    {
      "@type": "ListItem",
      position: 3,
      name: title,
      item: new URL(Astro.url.pathname, Astro.url),
    },
  ],
};

/* ========== Prev/Next Posts ========== */
const allPosts = (posts || []).map(({ data }: any) => ({
  slug: data?.slug,
  title: data?.title,
}));
const currentPostIndex = allPosts.findIndex(
  a => a.slug === (post?.data?.slug ?? null)
);
const prevPost =
  currentPostIndex < allPosts.length - 1
    ? allPosts[currentPostIndex + 1]
    : null;
const nextPost = currentPostIndex > 0 ? allPosts[currentPostIndex - 1] : null;

// Create page layout props including prev/next so Layout can render rel="prev"/rel="next" links
const pageLayoutProps = { ...layoutProps, prevPost, nextPost };

/* ========== Related Posts ========== */
let relatedPosts: any[] = [];
if (tags && tags.length > 0 && posts) {
  // Get posts with the same first tag, excluding current post and prev/next posts
  const firstTag = tags[0];
  // Cast incoming posts to the expected CollectionEntry type to satisfy TypeScript
  const postsWithSameTag = getPostsByTag(
  posts as any[],
    firstTag
  )
    .filter(
      p =>
        p.data.slug !== post.data.slug &&
        p.data.slug !== (prevPost?.slug ?? null) &&
        p.data.slug !== (nextPost?.slug ?? null)
    )
    .slice(0, 2); // Limit to 2 related posts

  relatedPosts = postsWithSameTag.map(({ data }) => ({
    slug: data.slug,
    title: data.title,
    ogImage: data.ogImage,
  }));
}
---

<Layout {...pageLayoutProps}>
  <!-- BreadcrumbList Schema -->
  <script
    is:inline
    type="application/ld+json"
    set:html={JSON.stringify(breadcrumbStructuredData)}
  />
  <Header />
  <TOC headings={toc} />
  <BackButton />
  <main
    id="main-content"
    class:list={[
      "mx-auto w-full max-w-4xl px-4 pb-12",
      { "mt-8": !SITE.showBackButton },
    ]}
  >
    <h1
      transition:name={slugifyStr(title)}
      class="inline-block my-2 text-2xl font-bold text-accent sm:text-3xl"
    >
      {title}
    </h1>
    <div class="flex items-center gap-4">
      <Datetime
        pubDatetime={pubDatetime}
        modDatetime={modDatetime}
        size="sm"
        class="mb-2"
      />
    </div>
    <p class="ml-1.5 text-xs font-light">
      By : {author}{readingTime ? ` | ${readingTime}` : ""}
    </p>
    <article id="article" class="max-w-4xl mx-auto mt-8 prose">
      <img
        class="h-[14rem] w-[100vw] overflow-hidden rounded-lg object-cover object-center img-loading blurry-load"
        src={placeholderOg || proxyOgUrl}
        data-large={proxyOgUrl}
        alt={title
          ? `Cover image for blog post "${title}"${author ? ` by ${author}` : ""}`
          : "Blog post cover image"}
        loading="eager"
      />

      <!-- Render Notion content as HTML -->
      <div
        class="max-w-4xl mx-auto prose prose-lg notion-content"
        set:html={notionContent}
      />
    </article>

    <ul class="flex flex-row items-center justify-center my-8 md:justify-end">
      {
        (tags || []).map((tag: string) => (
          <Tag tag={slugifyStr(tag)} tagName={tag} />
        ))
      }
    </ul>
    <div
      class="flex flex-col items-center justify-between gap-8 sm:flex-row sm:items-end sm:gap-4"
    >
      <ShareLinks class="transition duration-200 hover:opacity-80" />

      <button
        id="back-to-top"
        class="hidden py-1 transition duration-200 focus-outline whitespace-nowrap hover:-translate-y-1 hover:opacity-75 md:block"
      >
        <IconChevronLeft class="inline-block rotate-90" />
        <span>Go Top</span>
      </button>
    </div>

    <hr class="my-6 border-dashed" />

    <!-- Previous/Next Post Buttons -->
    <div data-pagefind-ignore class="grid grid-cols-2 gap-8">
      {
        prevPost && (
          <a
            href={`/blog/${prevPost.slug}`}
            class="flex w-full gap-1 hover:opacity-75"
          >
            <IconChevronLeft class="flex-none inline-block" />
            <div>
              <span>Older Post</span>
              <div class="pt-2 text-sm text-accent/85">{prevPost.title}</div>
            </div>
          </a>
        )
      }
      {
        nextPost && (
          <a
            href={`/blog/${nextPost.slug}`}
            class="flex justify-end w-full gap-1 text-right hover:opacity-75 sm:col-start-2"
          >
            <div>
              <span>Later Post</span>
              <div class="pt-2 text-sm text-accent/85">{nextPost.title}</div>
            </div>
            <IconChevronRight class="flex-none inline-block" />
          </a>
        )
      }
    </div>

    <!-- Related Posts Section -->
    {
      relatedPosts && relatedPosts.length > 0 && (
        <section class="mt-12">
          <h2 class="mb-6 text-2xl font-bold text-center text-accent">
            โพสต์ที่เกี่ยวข้อง
          </h2>
          <div class="grid gap-6 sm:grid-cols-2">
            {relatedPosts.map(relatedPost => (
              <a
                href={`/blog/${relatedPost.slug}`}
                class="decoration-dashed underline-offset-4 focus-visible:no-underline focus-visible:underline-offset-0"
              >
                <div class="relative flex-shrink-0 object-cover mb-4 overflow-hidden rounded-lg">
                        {
                          (() => {
                            let rsrc = relatedPost.ogImage?.src || "/pickyzz-og.png";
                            try {
                              if (isAllowedUrl(rsrc)) {
                                const enc = Buffer.from(encodeURIComponent(rsrc), 'utf8')
                                  .toString('base64')
                                  .replace(/\+/g, '-')
                                  .replace(/\//g, '_')
                                  .replace(/=+$/, '');
                                rsrc = `/api/image/p/${enc}`;
                              }
                            } catch (e) {}
                            return (
                              <img
                                class="card-animate h-[13rem] w-full max-w-full scale-125 object-cover object-center duration-500 hover:scale-110 md:scale-100 img-loading blurry-load"
                                src={rsrc}
                                data-large={relatedPost.ogImage?.src || "/pickyzz-og.png"}
                                alt={relatedPost.title}
                                loading="lazy"
                                decoding="async"
                              />
                            );
                          })()
                        }
                  <div class="absolute bottom-0 left-0 right-0 flex min-h-[35%] items-center justify-center bg-black/75 px-10 py-2">
                    <h2 class="text-center text-[1.1rem] text-lg font-light text-white decoration-dashed">
                      {relatedPost.title}
                    </h2>
                  </div>
                </div>
              </a>
            ))}
          </div>
        </section>
      )
    }

    <Waline />
  </main>
  <Footer />
</Layout>

<script is:inline data-astro-rerun>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-fill";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-[4px] w-0 bg-accent rounded-lg";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    document.addEventListener("scroll", () => {
      const winScroll =
        document.body.scrollTop || document.documentElement.scrollTop;
      const height =
        document.documentElement.scrollHeight -
        document.documentElement.clientHeight;
      const scrolled = (winScroll / height) * 100;
      if (document) {
        const myBar = document.getElementById("myBar");
        if (myBar) {
          myBar.style.width = scrolled + "%";
        }
      }
    });
  }
  updateScrollProgress();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  /** Copy function for Notion code blocks */
  async function copyCodeBlock(button) {
    const codeBlock = button.closest(".notion-code-block");
    const codeElement =
      codeBlock.querySelector(".code-content code") ||
      codeBlock.querySelector("code");
    const text = codeElement?.textContent || "";

    if (!text.trim()) {
      return;
    }

    try {
      await navigator.clipboard.writeText(text);
      // Mirror client-side behavior: temporarily change visible label to 'copied'
      const labelSpan = button.querySelector && button.querySelector('.icon-label');
      const origLabel = labelSpan ? labelSpan.textContent : null;
      if (labelSpan) labelSpan.textContent = 'copied';
      // Use class-based transient state
      button.classList.add("copied");
      button.disabled = true;
      button.setAttribute('data-copied','true');
      setTimeout(() => {
        if (labelSpan && origLabel != null) labelSpan.textContent = origLabel;
        button.classList.remove("copied");
        button.disabled = false;
        button.removeAttribute('data-copied');
      }, 1600);
    } catch (err) {
      // Fallback for insecure contexts where Clipboard API isn't available.
      // We avoid deprecated document.execCommand and instead select the text
      // and prompt the user to press Cmd/Ctrl+C to copy manually.
      const tempTA = document.createElement('textarea');
      tempTA.value = text;
      tempTA.setAttribute('readonly', '');
      // Keep it visually hidden but selectable
      tempTA.style.position = 'fixed';
      tempTA.style.top = '-1000px';
      tempTA.style.opacity = '0';
      document.body.appendChild(tempTA);
      try {
        tempTA.focus();
        tempTA.select();
      } catch (_) {
        // ignore selection failures
      }

      const labelSpan = button.querySelector && button.querySelector('.icon-label');
      const origLabel = labelSpan ? labelSpan.textContent : null;
  const isTouch = (('ontouchstart' in window) || (navigator.maxTouchPoints || 0) > 0);
  const isMac = navigator.platform ? /Mac|iPhone|iPod|iPad/.test(navigator.platform) : false;
  const promptText = isTouch ? 'long-press to copy' : (isMac ? 'press ⌘+C' : 'press Ctrl+C');

      // Inform user to press copy keys
      if (labelSpan) labelSpan.textContent = promptText;
      button.classList.add('copy-manual');
      button.setAttribute('aria-live', 'polite');

      // Listen briefly for the copy key combo to provide success UI
      let handled = false;
      const keyHandler = (e) => {
        const isCopyCombo = (isMac && e.metaKey && e.key.toLowerCase() === 'c') || (!isMac && e.ctrlKey && e.key.toLowerCase() === 'c');
        if (isCopyCombo) {
          handled = true;
          button.classList.remove('copy-manual');
          button.classList.add('copied');
          if (labelSpan) labelSpan.textContent = 'copied';
          setTimeout(() => {
            if (labelSpan && origLabel != null) labelSpan.textContent = origLabel;
            button.classList.remove('copied');
          }, 1200);
        }
      };
      window.addEventListener('keydown', keyHandler, { once: true });

      // Cleanup hidden textarea and restore label after a short delay
      setTimeout(() => {
        try { tempTA.remove(); } catch (_) { /* noop */ }
        if (!handled) {
          if (labelSpan && origLabel != null) labelSpan.textContent = origLabel;
          button.classList.remove('copy-manual');
        }
      }, 3000);
    }
  }

  // Make function globally available
  window.copyCodeBlock = copyCodeBlock;

  // Initialize Prism for code highlighting
  function initPrism() {
    if (window.Prism) {
      // Re-run Prism on all code blocks that are not already highlighted by Shiki
      const codeBlocks = document.querySelectorAll('.notion-code-block pre[class*="language-"]:not(.shiki)');
      codeBlocks.forEach(block => {
        window.Prism.highlightElement(block);
      });
    }
  }

  /** Theme detection and code block re-rendering */
  function initThemeAwareCodeBlocks() {
    const codeBlocks = document.querySelectorAll(".notion-code-block");

    codeBlocks.forEach(block => {
      const language = block.dataset.language;
      if (!language) return;

      // Re-render code block with current theme
      updateCodeBlockTheme(block, language);
    });
  }

  function updateCodeBlockTheme(block, language) {
    // This function would re-render the code block with the current theme
    // For now, we'll just update the visual appearance
    const isDark =
      document.documentElement.classList.contains("dark") ||
      document.documentElement.getAttribute("data-theme") === "dark";

    block.setAttribute("data-theme", isDark ? "dark" : "light");
  }

  // Listen for theme changes (guarded to avoid redeclaration)
  if (!window.__themeObserver) {
    window.__themeObserver = new MutationObserver(mutations => {
      mutations.forEach(mutation => {
        if (
          mutation.type === "attributes" &&
          (mutation.attributeName === "class" ||
            mutation.attributeName === "data-theme")
        ) {
          // Theme changed, update code blocks
          setTimeout(() => {
            initThemeAwareCodeBlocks();
          }, 100);
        }
      });
    });

    window.__themeObserver.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class", "data-theme"],
    });
  } else {
    // Already initialized; do nothing to avoid duplicate observer
  }

  // Initialize theme-aware code blocks on load
  document.addEventListener("DOMContentLoaded", () => {
    initThemeAwareCodeBlocks();
    initLazyLoading();
    initPrism();
  });

  // Re-initialize after Astro page transitions
  document.addEventListener("astro:after-swap", () => {
    setTimeout(() => {
      initThemeAwareCodeBlocks();
      initLazyLoading();
      initPrism();
    }, 100);
  });

  /** Initialize lazy loading for images in Notion content */
  function initLazyLoading() {
    const images = document.querySelectorAll(
      ".notion-content img:not([loading])"
    );
    images.forEach(img => {
      if (!img.hasAttribute("loading")) {
        img.setAttribute("loading", "lazy");
        img.setAttribute("decoding", "async");
      }
    });
  }

  /** Scrolls the document to the top when

   * the "Back to Top" button is clicked. */
  function backToTop() {
    function scrollHandler() {
      try {
        window.scrollTo({ top: 0, behavior: "smooth" });
      } catch (err) {
        // Fallback for older browsers
        document.body.scrollTop = 0; // For Safari
        document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
      }
    }

    function attach() {
      const btn = document.querySelector("#back-to-top");
      if (!btn) return;
      // Remove any existing inline handler to avoid duplicates, then add listener
      try {
        btn.onclick = null;
      } catch (e) {
        /* ignore */
      }
      btn.addEventListener("click", scrollHandler);
    }

    // Attach immediately (for full page loads)
    attach();

    // Re-attach after Astro client navigation or page load events
    document.addEventListener("astro:page-load", attach);
    document.addEventListener("astro:after-swap", () => {
      attach();
      // Keep existing behavior of jumping to top after swap
      try {
        window.scrollTo({ left: 0, top: 0, behavior: "instant" });
      } catch (e) {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
      }
    });
  }
  backToTop();

  /* Go to page start after page swap */
  document.addEventListener("astro:after-swap", () =>
    window.scrollTo({ left: 0, top: 0, behavior: "instant" })
  );

  /** TOC Scroll Highlighting Logic */
  function initTocHighlighting() {
    const tocLinks = document.querySelectorAll(".toc-link");
    const headings = document.querySelectorAll(
      "h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]"
    );

    if (tocLinks.length === 0 || headings.length === 0) return;

    let currentActiveLink = null;
    let ticking = false;
    let lastScrollY = window.scrollY;

    // Function to find the heading that's currently in view
    function findActiveHeading() {
      const scrollY = window.pageYOffset;
      const windowHeight = window.innerHeight;
      const scrollCenter = scrollY + windowHeight / 2;

      // Find the heading closest to the center of the viewport
      let activeHeading = null;
      let minDistance = Infinity;

      headings.forEach(heading => {
        const rect = heading.getBoundingClientRect();
        const headingTop = rect.top + scrollY;
        const headingCenter = headingTop + rect.height / 2;
        const distance = Math.abs(scrollCenter - headingCenter);

        if (distance < minDistance) {
          minDistance = distance;
          activeHeading = heading;
        }
      });

      return activeHeading;
    }

    // Function to update active TOC link immediately
    function updateActiveTocLinkImmediate() {
      const activeHeading = findActiveHeading();
      if (!activeHeading) return;

      const activeId = activeHeading.id;
      const activeTocLink = document.querySelector(
        `.toc-link[data-slug="${activeId}"]`
      );

      if (activeTocLink && activeTocLink !== currentActiveLink) {
        // Remove previous active state
        if (currentActiveLink) {
          currentActiveLink.classList.remove("active");
        }

        // Add new active state
        activeTocLink.classList.add("active");
        currentActiveLink = activeTocLink;
      }
    }

    // Throttled update with shorter delay
    function updateActiveTocLinkThrottled() {
      if (!ticking) {
        requestAnimationFrame(() => {
          updateActiveTocLinkImmediate();
          ticking = false;
        });
        ticking = true;
      }
    }

    // Immediate update for fast response
    function handleScrollImmediate() {
      const currentScrollY = window.scrollY;

      // Only update if scrolled significantly (reduce unnecessary updates)
      if (Math.abs(currentScrollY - lastScrollY) > 10) {
        updateActiveTocLinkImmediate();
        lastScrollY = currentScrollY;
      }
    }

    // Smooth scroll for TOC links with faster animation
    tocLinks.forEach(link => {
      link.addEventListener("click", e => {
        e.preventDefault();
        const targetId = link.getAttribute("data-slug");
        const targetElement = document.getElementById(targetId);

        if (targetElement) {
          const headerHeight = 80; // Account for fixed header
          const targetPosition = targetElement.offsetTop - headerHeight;

          window.scrollTo({
            top: targetPosition,
            behavior: "smooth",
          });
        }
      });
    });

    // Initialize active state
    updateActiveTocLinkImmediate();

    // Use immediate updates for faster response, with fallback to throttled updates
    window.addEventListener("scroll", handleScrollImmediate, { passive: true });

    // Fallback throttled update for heavy scroll operations
    let throttledTimer;
    window.addEventListener(
      "scroll",
      () => {
        clearTimeout(throttledTimer);
        throttledTimer = setTimeout(updateActiveTocLinkThrottled, 16); // ~60fps
      },
      { passive: true }
    );
  }

  // Initialize TOC highlighting when DOM is ready
  document.addEventListener("DOMContentLoaded", initTocHighlighting);
  // Re-initialize after Astro page transitions
  document.addEventListener("astro:after-swap", () => {
    setTimeout(initTocHighlighting, 100);
  });
</script>

<!-- Image Error Boundary for better image loading reliability -->
<script>
  import('@/components/ImageErrorBoundary');
</script>

<!-- Image Monitoring for Free Plan optimization -->
<script>
  import('@/scripts/imageMonitor.js');
</script>
