---
import { SITE } from "@/config";
import "@/styles/global.css";
import { ClientRouter } from "astro:transitions";

export interface Props {
  title?: string;
  author?: string;
  profile?: string;
  description?: string;
  ogImage?: string;
  canonicalURL?: string;
  pubDatetime?: Date;
  modDatetime?: Date | null;
  scrollSmooth?: boolean;
}

const {
  title = SITE.title,
  author = SITE.author,
  profile = SITE.profile,
  description = SITE.desc,
  ogImage = SITE.ogImage,
  canonicalURL = new URL(Astro.url.pathname, Astro.url),
  pubDatetime,
  modDatetime,
  scrollSmooth = false,
} = Astro.props;

const socialImageURL = new URL(ogImage ?? SITE.ogImage ?? "og.png", Astro.url);

const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: `${title}`,
  image: `${socialImageURL}`,
  ...(pubDatetime && { datePublished: pubDatetime.toISOString() }),
  ...(modDatetime && { dateModified: modDatetime.toISOString() }),
  author: [
    {
      "@type": "Person",
      name: `${author}`,
      ...(profile && { url: profile }),
    },
  ],
};
---

<!doctype html>
<html lang="en" class={`${scrollSmooth && "scroll-smooth"}`}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/manifest.webmanifest" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <!-- Google Tag Manager -->
    <script is:inline>
      (function (w, d, s, l, i) {
        w[l] = w[l] || [];
        w[l].push({ "gtm.start": new Date().getTime(), event: "gtm.js" });
        var f = d.getElementsByTagName(s)[0],
          j = d.createElement(s),
          dl = l != "dataLayer" ? "&l=" + l : "";
        j.async = true;
        j.src = "https://www.googletagmanager.com/gtm.js?id=" + i + dl;
        f.parentNode.insertBefore(j, f);
      })(window, document, "script", "dataLayer", "GTM-KP5D5J3");
    </script>
    <!-- End Google Tag Manager -->

    <!-- General Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- Open Graph / Facebook -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={socialImageURL} />

    <!-- Article Published/Modified time -->
    {
      pubDatetime && (
        <meta
          property="article:published_time"
          content={pubDatetime.toISOString()}
        />
      )
    }
    {
      modDatetime && (
        <meta
          property="article:modified_time"
          content={modDatetime.toISOString()}
        />
      )
    }

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={socialImageURL} />

    <!-- Google JSON-LD Structured data -->
    <script
      is:inline
      type="application/ld+json"
      set:html={JSON.stringify(structuredData)}
    />

    <!-- Load Google Font -->
    <link
      rel="preconnect"
      href="https://fonts.googleapis.com"
    />
    <link
      rel="preconnect"
      href="https://fonts.gstatic.com"
      crossorigin
    />
    <link
      href="https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:ital,wght@0,400;0,500;0,600;0,700;1,400;1,600&display=swap"
      rel="stylesheet"
    />

    <meta name="theme-color" content="#ffffff" />
    <meta name="color-scheme" content="light dark" />

    <!-- Cookie -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/gh/orestbida/cookieconsent@v2.8.6/dist/cookieconsent.css"
    />

    <!-- Waline comment style -->
    <link
      rel="stylesheet"
      href="https://unpkg.com/@waline/client@v3/dist/waline.css"
    />
    <!-- Waline comment end -->

    <ClientRouter />

    <script is:inline src="/toggle-theme.js"></script>
  </head>
  <body class="pt-[8vh] md:pt-[12vh]">
    <!-- Google Tag Manager (noscript) -->
    <noscript
      ><iframe
        src="https://www.googletagmanager.com/ns.html?id=GTM-KP5D5J3"
        height="0"
        width="0"
        style="display:none;visibility:hidden"></iframe>
    </noscript>
    <!-- End Google Tag Manager (noscript) -->

    <slot />

    <!-- Cookie -->
    <script
      is:inline
      src="https://cdn.jsdelivr.net/gh/orestbida/cookieconsent@v2.8.6/dist/cookieconsent.js"
    ></script>
    <script
      is:inline
      src="https://cdn.jsdelivr.net/gh/pickyzz/blog-rebuild@main/public/cookies.js"
    ></script>

    <!-- TOC Script -->
    <script is:inline>
      // TOC Highlight and Click Handling
      let debounceTimer = null;
      let rafId = null;

      // Debounce function to prevent rapid firing
      function debounce(func, wait) {
        return function executedFunction(...args) {
          const later = () => {
            clearTimeout(debounceTimer);
            func(...args);
          };
          clearTimeout(debounceTimer);
          debounceTimer = setTimeout(later, wait);
        };
      }

      // Function to update active TOC link
      const updateActiveTocLink = debounce(() => {
        const headings = Array.from(document.querySelectorAll('.notion-content h1[id], .notion-content h2[id], .notion-content h3[id], .notion-content h4[id], .notion-content h5[id], .notion-content h6[id]'));
     
        // Find the heading at the top of the viewport
        let topHeading = null;
        let minTop = Infinity;
     
        headings.forEach((heading) => {
          const rect = heading.getBoundingClientRect();
          if (rect.top >= 0 && rect.top < minTop) {
            minTop = rect.top;
            topHeading = heading;
          }
        });
     
        // If no heading is at or below the top, find the closest one above
        if (!topHeading) {
          minTop = Infinity;
          headings.forEach((heading) => {
            const rect = heading.getBoundingClientRect();
            if (rect.top < 0 && Math.abs(rect.top) < Math.abs(minTop)) {
              minTop = rect.top;
              topHeading = heading;
            }
          });
        }
     
        if (topHeading) {
          const id = topHeading.id;
          const tocLink = document.querySelector(`a[href="#${id}"]`);
          if (tocLink && !tocLink.classList.contains('active')) {
            // Remove active from all links
            const activeLinks = document.querySelectorAll('.toc-link.active');
            activeLinks.forEach(link => {
              link.classList.remove('active');
            });
            // Add active to current link
            tocLink.classList.add('active');
          }
        }
      }, 100); // 100ms debounce

      // Function to handle scroll with requestAnimationFrame
      function handleScroll() {
        if (rafId) {
          cancelAnimationFrame(rafId);
        }
        rafId = requestAnimationFrame(updateActiveTocLink);
      }

      document.addEventListener("astro:page-load", function () {
        // Cleanup previous timer and raf
        if (debounceTimer) {
          clearTimeout(debounceTimer);
        }
        if (rafId) {
          cancelAnimationFrame(rafId);
        }

        // Find all the links inside the TOC
        const tocLinks = document.querySelectorAll('a[href^="#"]');

        // Add click event listener to each TOC link
        tocLinks.forEach(link => {
          link.addEventListener("click", function (event) {
            event.preventDefault(); // Prevent default anchor behavior

            // Get the target element by the href attribute
            const targetId = this.getAttribute("href").substring(1);
            const targetElement = document.getElementById(targetId);

            // Scroll the target element into view, with the target in the center
            if (targetElement) {
              targetElement.scrollIntoView({
                behavior: "smooth",
                block: "center", // This ensures the target is in the center of the screen
              });
            }
          });
        });

        // Listen to scroll events with requestAnimationFrame
        window.addEventListener('scroll', handleScroll, { passive: true });
      });

      // Cleanup on page change
      document.addEventListener("astro:before-swap", function () {
        if (debounceTimer) {
          clearTimeout(debounceTimer);
        }
        if (rafId) {
          cancelAnimationFrame(rafId);
        }
        window.removeEventListener('scroll', handleScroll);
      });
    </script>
  </body>
</html>

<style>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
  }
</style>
