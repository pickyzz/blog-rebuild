---
export interface Props {
  pubDatetime: string | Date;
  modDatetime: string | Date | undefined | null;
  size?: "sm" | "lg";
  className?: string;
}

const {
  pubDatetime,
  modDatetime,
  size = "sm",
  className = "",
} = Astro.props;

/* ========== Formatted Datetime ========== */
const myDatetime = new Date(
  modDatetime && modDatetime > pubDatetime ? modDatetime : pubDatetime
);

const date = myDatetime.toLocaleDateString([], {
  year: "numeric",
  month: "short",
  day: "numeric",
  timeZone: "Asia/Bangkok",
});

const time = myDatetime.toLocaleTimeString([], {
  hour: "2-digit",
  minute: "2-digit",
  timeZone: "Asia/Bangkok",
});
---

<div
  class={`flex items-center space-x-2 opacity-80 ${className}`.trim()}
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class={`${
      size === "sm" ? "scale-90" : "scale-100"
    } fill-foreground inline-block h-6 w-6 min-w-[1.375rem]`}
    aria-hidden="true"
  >
    <path d="M7 11h2v2H7zm0 4h2v2H7zm4-4h2v2h-2zm0 4h2v2h-2zm4-4h2v2h-2zm0 4h2v2h-2z"></path>
    <path d="M5 22h14c1.103 0 2-.897 2-2V6c0-1.103-.897-2-2-2h-2V2h-2v2H9V2H7v2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2zM19 8l.001 12H5V8h14z"></path>
  </svg>
  <span
    class={`italic ${size === "sm" ? "text-sm" : "text-sm sm:text-base"} pr-2`}
  >
  </span>
  {modDatetime && modDatetime > pubDatetime ? (
    <span
      class={`italic ${size === "sm" ? "text-xs" : "textsm"} badge badge-primary ${size === "sm" ? "badge-sm" : "badge-md"} badge-outline`}
    >
      Edited
    </span>
  ) : (
    <span class="sr-only">Published</span>
  )}
</div>
