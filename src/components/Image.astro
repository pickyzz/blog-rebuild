---
import { Image as AstroImage } from "astro:assets";
import { postImageImport } from "../helpers/images.mjs";
import { generateResponsiveImages } from "../utils/imageOptimization";

const {
  src,
  MAX_WIDTH = 1400,
  imageClass = "w-full h-auto bg-gray-100 rounded-xl",
  alt = "Blog Image",
  loading = "lazy",
  decoding = "async",
  fetchpriority = "auto",
  sizes = "(min-width: 1400px) 1400px, 100vw",
} = Astro.props;

const relativeSrc = `../${src}`;
const imgType = relativeSrc.split(".").pop();
const { default: imgData } = await postImageImport(src);
const { width, height } = imgData;
---

{
  imgType === "bmp" ? (
    <img
      src={relativeSrc}
      alt={alt}
      class={imageClass}
      loading={loading}
      decoding={decoding}
    />
  ) : (
    <picture>
      <source
        type="image/avif"
        srcset={(
          await generateResponsiveImages(imgData, {
            sizes: [320, 640, 960, MAX_WIDTH],
            format: "avif",
            quality: 75,
            fit: "cover",
            position: "center",
          })
        )
          .map(({ src, width }) => `${src} ${width}w`)
          .join(", ")}
        {sizes}
      />
      <source
        type="image/webp"
        srcset={(
          await generateResponsiveImages(imgData, {
            sizes: [320, 640, 960, MAX_WIDTH],
            format: "webp",
            quality: 80,
            fit: "cover",
            position: "center",
          })
        )
          .map(({ src, width }) => `${src} ${width}w`)
          .join(", ")}
        {sizes}
      />
      <AstroImage
        src={imgData}
        {alt}
        loading={loading}
        decoding={decoding}
        fetchpriority={fetchpriority}
        class={imageClass}
        width={width < MAX_WIDTH ? width : MAX_WIDTH}
        height={height}
        {sizes}
      />
    </picture>
  )
}
