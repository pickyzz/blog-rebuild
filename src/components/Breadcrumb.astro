---
// Remove current url path and remove trailing slash if exists
const currentUrlPath = Astro.url.pathname.replace(/\/+$/, "");

// Get url array from path and build crumb items (label + optional href)
// eg: /tags/tailwindcss/page/2 => [{label:'Tags', href:'/tags'}, {label:'tailwindcss', href:'/tags/tailwindcss'}, {label:'Page 2'}]
const segments = currentUrlPath.split("/").slice(1);
const crumbs = [];
// Prefer page from query param when available: e.g., /blog?page=2 or /tags/slug?page=3
const pageParam = Astro.url.searchParams.get("page");
const pageFromQuery = pageParam && !isNaN(Number(pageParam)) ? Number(pageParam) : null;

if (segments.length === 0 || (segments.length === 1 && segments[0] === "")) {
  // root only â€” no crumbs
} else if (segments[0] === "blog") {
  // handle /blog, /blog/2, /blog/page/2, or /blog?page=N
  let page = 1;
  if (pageFromQuery !== null) {
    page = pageFromQuery;
  } else if (segments[1] === "page" && segments.length >= 3 && !isNaN(Number(segments[2]))) {
    page = Number(segments[2]);
  } else if (segments[1] && !isNaN(Number(segments[1]))) {
    page = Number(segments[1]);
  }

  // Blog link
  crumbs.push({ label: "Blog", href: "/blog" });

  // If not page 1, add Page N as current
  if (page > 1) crumbs.push({ label: `Page ${page}` });

} else if (segments[0] === "tags") {
  // handle /tags, /tags/slug, /tags/slug/2, /tags/slug/page/3
  crumbs.push({ label: "Tags", href: "/tags" });

  const slug = segments[1];
    if (slug) {
      crumbs.push({ label: slug, href: `/tags/${slug}` });

      // Prefer query param page when present
      if (pageFromQuery !== null) {
        if (pageFromQuery > 1) crumbs.push({ label: `Page ${pageFromQuery}` });
      } else {
        // check for /tags/slug/2
        if (segments[2] && !isNaN(Number(segments[2]))) {
          const page = Number(segments[2]);
          if (page > 1) crumbs.push({ label: `Page ${page}` });
        }

        // check for /tags/slug/page/3
        if (segments[2] === "page" && segments.length >= 4 && !isNaN(Number(segments[3]))) {
          const page = Number(segments[3]);
          if (page > 1) crumbs.push({ label: `Page ${page}` });
        }
      }
    }

} else {
  // Generic breadcrumb: accumulate path pieces and build hrefs
  let acc = "";
  for (const seg of segments) {
    acc += `/${seg}`;
    crumbs.push({ label: seg, href: acc });
  }
}

// We'll render `crumbs` in the template below
---

<nav class="w-full max-w-4xl px-4 mx-auto mt-8 mb-1" aria-label="breadcrumb">
  <ul
    class="font-light [&>li:not(:last-child)>a]:hover:opacity-100 [&>li]:inline"
  >
    <li>
      <a href="/" class="opacity-80">Home</a>
      <span aria-hidden="true" class="opacity-80">&raquo;</span>
    </li>
    {
      crumbs.map((crumb, index) => (
        index + 1 === crumbs.length ? (
          <li>
            <span
              class={`${index > 0 ? "lowercase" : "capitalize"}`}
              aria-current="page"
            >
              {crumb.label}
            </span>
          </li>
        ) : (
          <li>
            <a href={crumb.href} class="capitalize opacity-70">
              {crumb.label}
            </a>
            <span aria-hidden="true">&raquo;</span>
          </li>
        )
      ))
    }
  </ul>
</nav>
