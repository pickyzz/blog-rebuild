---
import { type CollectionEntry } from "astro:content";
import PostDetails from "@/layouts/PostDetails.astro";
import getPostsWithRT from "@/utils/getPostsWithRT";
import getSortedPosts from "@/utils/getSortedPosts";
import { getNotionPosts, getNotionPostBySlug } from "@/utils/getNotionPosts";

export interface Props {
  post: CollectionEntry<"blog">;
}

export const prerender = false;

export async function getStaticPaths() {
  const posts = await getNotionPosts();

  const postsWithRT = await getPostsWithRT(posts); // replace reading time logic with this func

  const postResult = postsWithRT.map(post => ({
    params: { slug: post.data.slug },
    props: { post },
  }));

  return postResult;
}

const { slug } = Astro.params;
const { post: staticPost } = Astro.props;

// In SSR mode, getStaticPaths is ignored, so we need to fetch the post dynamically
const post = staticPost || await getNotionPostBySlug(slug);

if (!post) {
  return Astro.redirect('/404');
}

const posts = await getNotionPosts();
const sortedPosts = getSortedPosts(posts);

// Add safety check for post data
if (!post.data) {
  return Astro.redirect('/404');
}
---

<PostDetails post={post} posts={sortedPosts} />