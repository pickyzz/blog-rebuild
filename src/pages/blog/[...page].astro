---
import Main from "@/layouts/Main.astro";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Card from "@/components/Card.astro";
import Pagination from "@/components/Pagination.astro";

/* SSR mode: cache-control header for real-time Notion content */
/* SSR pagination: dynamic, real-time */
import { URL } from "url";

const { SITE } = await import("@/config");
const getSortedPosts = (await import("@/utils/getSortedPosts")).default;
const { getNotionPosts } = await import("@/utils/getNotionPosts");

const url = new URL(Astro.request.url);
const pageParam = url.searchParams.get("page");
const currentPage = Math.max(1, parseInt(pageParam || "1", 10));

const posts = await getNotionPosts();
const publishedPosts = posts.filter(post => !post.data.draft);
const sortedPosts = getSortedPosts(publishedPosts);

const pageSize = SITE.postPerPage;
const lastPage = Math.max(1, Math.ceil(sortedPosts.length / pageSize));
const start = (currentPage - 1) * pageSize;
const end = start + pageSize;
const pageData = sortedPosts.slice(start, end);

const page = {
  data: pageData,
  currentPage,
  lastPage,
  url: "/blog",
  prev:
    currentPage > 2
      ? `/blog?page=${currentPage - 1}`
      : currentPage === 2
        ? "/blog"
        : undefined,
  next:
    currentPage < lastPage
      ? currentPage + 1 === 1
        ? "/blog"
        : `/blog?page=${currentPage + 1}`
      : undefined,
  start: start + 1,
  end: Math.min(end, sortedPosts.length),
  total: sortedPosts.length,
  size: pageSize,
};

/* Set cache-control header for SSR response */
if (Astro.response && Astro.response.headers) {
  Astro.response.headers.set(
    "cache-control",
    "public, max-age=30, stale-while-revalidate=60"
  );
}
---

<Layout
  title={`Posts | ${SITE.title}`}
  canonicalURL={currentPage === 1
    ? `${SITE.website}blog`
    : `${SITE.website}blog?page=${currentPage}`}
>
  <Header />
  <Main pageTitle="Posts" pageDesc="All the articles I've posted.">
    {
      page.data && page.data.length > 0 ? (
        <ul class="mx-auto grid max-w-[80vw] grid-cols-1 gap-8 md:max-w-4xl md:grid-cols-2">
          {page.data.map(({ data, id }) => (
            <Card href={`/blog/${data.slug}`} frontmatter={data} />
          ))}
        </ul>
      ) : (
        <p class="text-center">No posts available.</p>
      )
    }
  </Main>

  <Pagination {page} />

  <Footer noMarginTop={page && page.lastPage > 1} />
</Layout>
