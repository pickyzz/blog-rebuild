---
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Main from "@/layouts/Main.astro";
import Card from "@/components/Card.astro";
import Pagination from "@/components/Pagination.astro";
import { getCollection } from "astro:content";

// Define the page props interface
interface PageProps {
  totalPages: number;
  posts: any[];
  currentPage: number;
  start: number;
  end: number;
  total: number;
  size: number;
  url: string;
  prev?: string;
  next?: string;
}

/* SSG mode: generate static paths */
export const prerender = true;
export async function getStaticPaths() {
  const { SITE } = await import("@/config");
  const posts = await getCollection("blog", ({ data }) => !data.draft);
  const sortedPosts = posts.sort(
    (a, b) => new Date(b.data.pubDatetime).valueOf() - new Date(a.data.pubDatetime).valueOf()
  );

  const pageSize = SITE.postPerPage || 10;
  const totalPages = Math.max(1, Math.ceil(sortedPosts.length / pageSize));

  // Generate paths for pages 2+
  const paths = [];
  for (let pageNum = 2; pageNum <= totalPages; pageNum++) {
    const startIndex = (pageNum - 1) * pageSize;
    const endIndex = startIndex + pageSize;
    const pagePosts = sortedPosts.slice(startIndex, endIndex);

    paths.push({
      params: { page: pageNum.toString() },
      props: {
        posts: pagePosts,
        currentPage: pageNum,
        totalPages,
        start: startIndex + 1,
        end: Math.min(endIndex, sortedPosts.length),
        total: sortedPosts.length,
        size: pageSize,
        url: `/blog/page/${pageNum}`,
        prev: pageNum > 2 ? `/blog/page/${pageNum - 1}` : "/blog",
        next: pageNum < totalPages ? `/blog/page/${pageNum + 1}` : undefined,
      },
    });
  }

  return paths;
}

const page = Astro.props as PageProps;
---

<Layout title={`Posts | Page ${page.currentPage}`} canonicalURL={page.url}>
  <Header />
  <Main pageTitle="Posts" pageDesc="All the articles I've posted.">
    {
      page.posts && page.posts.length > 0 ? (
        <ul class="mx-auto grid max-w-[80vw] grid-cols-1 gap-8 md:max-w-4xl md:grid-cols-2">
          {page.posts.map((post) => (
            <Card href={`/blog/${post.slug}`} frontmatter={post.data} />
          ))}
        </ul>
      ) : (
        <p class="text-center">No posts available.</p>
      )
    }
  </Main>

  <Pagination {page} />

  <Footer noMarginTop={page.totalPages > 1} />
</Layout>
