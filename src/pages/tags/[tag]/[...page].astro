---
import type { GetStaticPathsOptions, Page } from "astro";
import type { CollectionEntry } from "astro:content";
import Main from "@/layouts/Main.astro";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Card from "@/components/Card.astro";
import Pagination from "@/components/Pagination.astro";
import { SITE } from "@/config";
import { getCollection } from "astro:content";

// Define the page props interface
interface PageProps {
  posts: CollectionEntry<"blog">[];
  currentPage: number;
  totalPages: number;
  start: number;
  end: number;
  total: number;
  size: number;
  url: string;
  prev?: string;
  next?: string;
}

/* SSG mode: generate static paths */
export const prerender = true;
export async function getStaticPaths() {
  const posts = await getCollection("blog", ({ data }) => !data.draft);
  const pageSize = SITE.postPerPage || 10;

  // Get all unique tags
  const tagMap = new Map<string, CollectionEntry<"blog">[]>();

  posts.forEach(post => {
    post.data.tags.forEach(tag => {
      if (!tagMap.has(tag)) {
        tagMap.set(tag, []);
      }
      tagMap.get(tag)!.push(post);
    });
  });

  const paths = [];

  for (const [tag, tagPosts] of tagMap.entries()) {
    const sortedPosts = tagPosts.sort(
      (a, b) => new Date(b.data.pubDatetime).valueOf() - new Date(a.data.pubDatetime).valueOf()
    );
    const totalPages = Math.max(1, Math.ceil(sortedPosts.length / pageSize));

    // Generate all pages for this tag
    for (let pageNum = 1; pageNum <= totalPages; pageNum++) {
      const startIndex = (pageNum - 1) * pageSize;
      const endIndex = startIndex + pageSize;
      const pagePosts = sortedPosts.slice(startIndex, endIndex);

      if (pageNum === 1) {
        // First page uses /tags/[tag] path
        paths.push({
          params: { tag },
          props: {
            posts: pagePosts,
            currentPage: pageNum,
            totalPages,
            start: startIndex + 1,
            end: Math.min(endIndex, sortedPosts.length),
            total: sortedPosts.length,
            size: pageSize,
            url: `/tags/${tag}`,
            prev: undefined,
            next: totalPages > 1 ? `/tags/${tag}/2` : undefined,
          },
        });
      } else {
        // Additional pages use /tags/[tag]/[page] path
        paths.push({
          params: { tag, page: pageNum.toString() },
          props: {
            posts: pagePosts,
            currentPage: pageNum,
            totalPages,
            start: startIndex + 1,
            end: Math.min(endIndex, sortedPosts.length),
            total: sortedPosts.length,
            size: pageSize,
            url: `/tags/${tag}/${pageNum}`,
            prev: pageNum > 2 ? `/tags/${tag}/${pageNum - 1}` : `/tags/${tag}`,
            next: pageNum < totalPages ? `/tags/${tag}/${pageNum + 1}` : undefined,
          },
        });
      }
    }
  }

  return paths;
}

const page = Astro.props as PageProps;
const { tag } = Astro.params;
const tagName = typeof tag === "string" ? tag : "";
---

<Layout title={`Tag: ${tagName} | ${SITE.title}`}>
  <Header />
  <Main
    pageTitle={[`Tag:`, `${tagName}`]}
    titleTransition={tagName}
    pageDesc={`All the articles with the tag "${tagName}".`}
  >
    <ul
      class="mx-auto grid max-w-[80vw] grid-cols-1 gap-8 md:max-w-4xl md:grid-cols-2"
    >
      {
        page?.posts?.map((post) => (
          <Card href={`/blog/${post.slug}`} frontmatter={post.data} />
        ))
      }
    </ul>
  </Main>

  <Pagination {page} />

  <Footer noMarginTop={page?.totalPages > 1} />
</Layout>
