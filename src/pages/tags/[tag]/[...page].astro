---
import type { GetStaticPathsOptions, Page } from "astro";
import type { CollectionEntry } from "astro:content";
import Main from "@/layouts/Main.astro";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Card from "@/components/Card.astro";
import Pagination from "@/components/Pagination.astro";
import { SITE } from "@/config";
import { getNotionPostsByTag, getNotionUniqueTags } from "@/utils/getNotionPosts";

/* SSR pagination: dynamic, real-time */
import { URL } from "url";

/* SSR mode: cache-control header for real-time Notion content */
const { tag } = Astro.params;
const url = new URL(Astro.request.url);
const pageParam = url.searchParams.get("page");
const currentPage = Math.max(1, parseInt(pageParam || "1", 10));

const tagName = typeof tag === "string" ? tag : "";
const posts = await getNotionPostsByTag(tagName);
const pageSize = SITE.postPerPage;
const lastPage = Math.max(1, Math.ceil(posts.length / pageSize));
const start = (currentPage - 1) * pageSize;
const end = start + pageSize;
const pageData = posts.slice(start, end);

const page = {
  data: pageData,
  currentPage,
  lastPage,
  url: `/tags/${tagName}`,
  prev: currentPage > 2 ? `/tags/${tagName}?page=${currentPage - 1}` : (currentPage === 2 ? `/tags/${tagName}` : undefined),
  next: currentPage < lastPage ? (currentPage + 1 === 1 ? `/tags/${tagName}` : `/tags/${tagName}?page=${currentPage + 1}`) : undefined,
  start: start + 1,
  end: Math.min(end, posts.length),
  total: posts.length,
  size: pageSize,
};

/* Set cache-control header for SSR response */
if (Astro.response && Astro.response.headers) {
  Astro.response.headers.set("cache-control", "public, max-age=30, stale-while-revalidate=60");
}
---

<Layout title={`Tag: ${tagName} | ${SITE.title}`}>
  <Header />
  <Main
    pageTitle={[`Tag:`, `${tagName}`]}
    titleTransition={tagName}
    pageDesc={`All the articles with the tag "${tagName}".`}
  >
    <ul
      class="mx-auto grid max-w-[80vw] grid-cols-1 gap-8 md:max-w-4xl md:grid-cols-2"
    >
      {
        page?.data?.map(({ data, id }: any) => (
          <Card href={`/blog/${data.slug}`} frontmatter={data} />
        ))
      }
    </ul>
  </Main>

  <Pagination {page} />

  <Footer noMarginTop={page?.lastPage > 1} />
</Layout>
